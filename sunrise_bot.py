#!/usr/bin/env python3
import logging
import asyncio
import sqlite3
import math
from datetime import datetime, timedelta, date
import pytz
from telegram import (
    Update, 
    BotCommand, 
    KeyboardButton, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
# –£–¥–∞–ª—ë–Ω –∏–º–ø–æ—Ä—Ç –∏–∑ astral (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞)
#from astral import Observer
#from astral.sun import sun
from timezonefinder import TimezoneFinder

# –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.py
from config import BOT_TOKEN

#############################################
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#############################################

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: {"lat": float, "lon": float, "tz": str})
global_location = None

# –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã ‚Äì —Å–ª–æ–≤–∞—Ä—å: { chat_id: {user_id: first_name, ...} }
subscribed_chats = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∫–ª—é—á (chat_id, –¥–∞—Ç–∞, —Ç–∏–ø_—Å–æ–±—ã—Ç–∏—è)
notified_events_global = {}

DATABASE_NAME = "global_settings.db"
REMINDER_OFFSET = 10

#############################################
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#############################################

def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_settings (
            id INTEGER PRIMARY KEY,
            lat REAL,
            lon REAL,
            tz TEXT
        )
    ''')
    conn.commit()
    cursor.execute("SELECT lat, lon, tz FROM global_settings WHERE id = 1")
    row = cursor.fetchone()
    if row:
        global global_location
        global_location = {"lat": row[0], "lon": row[1], "tz": row[2]}
        logging.info("–õ–æ–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: %s", global_location)
    conn.close()

def save_global_location(lat: float, lon: float, tz: str):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM global_settings WHERE id = 1")
    if cursor.fetchone():
        cursor.execute("UPDATE global_settings SET lat = ?, lon = ?, tz = ? WHERE id = 1", (lat, lon, tz))
    else:
        cursor.execute("INSERT INTO global_settings (id, lat, lon, tz) VALUES (1, ?, ?, ?)", (lat, lon, tz))
    conn.commit()
    conn.close()

#############################################
# –ù–æ–≤—ã–π –±–ª–æ–∫: –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞ –ø–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—é –≤–æ—Å—Ö–æ–¥–∞
#############################################

def calculate_sun_times(cur_date: date, lat: float, lon: float, tzinfo):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏—é.
    –ü–æ–ø—Ä–∞–≤–∫–∞: —É–≥–æ–ª -0.83¬∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Ä–µ—Ñ—Ä–∞–∫—Ü–∏—é –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–∏—Å–∫.
    """
    def deg2rad(d): 
        return math.radians(d)
    def rad2deg(r): 
        return math.degrees(r)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Æ–ª–∏–∞–Ω—Å–∫–æ–π –¥–∞—Ç—ã –¥–ª—è 0 UTC –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    year, month, day = cur_date.year, cur_date.month, cur_date.day
    if month <= 2:
        year -= 1
        month += 12
    A = year // 100
    B = 2 - A + (A // 4)
    J0 = int(365.25*(year+4716)) + int(30.6001*(month+1)) + day + B - 1524.5

    # –°–º–µ—â—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
    n = J0 - 2451545.0 + 0.0008
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª—É–¥–Ω—è (J*)
    J_star = n - (lon / 360)
    # –°—Ä–µ–¥–Ω—è—è –∞–Ω–æ–º–∞–ª–∏—è –°–æ–ª–Ω—Ü–∞
    M = (357.5291 + 0.98560028 * J_star) % 360
    M_rad = deg2rad(M)
    # –¶–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
    C = 1.9148 * math.sin(M_rad) + 0.0200 * math.sin(2 * M_rad) + 0.0003 * math.sin(3 * M_rad)
    # –≠–∫–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞ –°–æ–ª–Ω—Ü–∞
    lambda_sun = (M + C + 180 + 102.9372) % 360
    lambda_rad = deg2rad(lambda_sun)
    # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—É–¥–Ω—è
    J_transit = 2451545.0 + J_star + 0.0053 * math.sin(M_rad) - 0.0069 * math.sin(2 * lambda_rad)
    # –°–∫–ª–æ–Ω–µ–Ω–∏–µ –°–æ–ª–Ω—Ü–∞
    delta = math.asin(math.sin(lambda_rad) * math.sin(deg2rad(23.44)))
    # –ß–∞—Å–æ–≤–æ–π —É–≥–æ–ª (—É—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª -0.83¬∞)
    h0 = deg2rad(-0.83)
    lat_rad = deg2rad(lat)
    cos_omega = (math.sin(h0) - math.sin(lat_rad)*math.sin(delta)) / (math.cos(lat_rad)*math.cos(delta))
    cos_omega = max(min(cos_omega, 1), -1)
    omega = math.acos(cos_omega)
    omega_deg = rad2deg(omega)
    # –Æ–ª–∏–∞–Ω—Å–∫–∏–µ –¥–∞—Ç—ã –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
    J_rise = J_transit - omega_deg/360.0
    J_set = J_transit + omega_deg/360.0

    def julian_to_datetime(j):
        timestamp = (j - 2440587.5) * 86400.0
        return datetime.utcfromtimestamp(timestamp).replace(tzinfo=pytz.utc)
    
    sunrise_utc = julian_to_datetime(J_rise)
    sunset_utc = julian_to_datetime(J_set)
    sunrise_local = sunrise_utc.astimezone(tzinfo)
    sunset_local = sunset_utc.astimezone(tzinfo)
    return sunrise_local, sunset_local

#############################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#############################################

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üòÄ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üìç /setlocation ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
        f"‚è∞ /times ‚Äì –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {REMINDER_OFFSET} –º–∏–Ω)\n"
        "üß™ /test ‚Äì —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    await update.message.reply_text(text)

async def setlocation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_type = update.effective_chat.type
    if chat_type in ("group", "supergroup"):
        me = await context.bot.get_me()
        bot_username = me.username
        url = f"https://t.me/{bot_username}?start=setlocation"
        inline_kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("üë§ –í –õ–°", url=url)
        )
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤ –õ–° –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏.", reply_markup=inline_kb)
        return

    button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    kb = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        tf = TimezoneFinder()
        tz_str = tf.timezone_at(lng=lon, lat=lat) or "UTC"
        global global_location
        global_location = {"lat": lat, "lon": lon, "tz": tz_str}
        save_global_location(lat, lon, tz_str)
        await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è: {lat}, {lon} (tz: {tz_str}) ‚úÖ")
    else:
        await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")

async def times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not global_location:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /setlocation")
        return

    lat = global_location['lat']
    lon = global_location['lon']
    tz_str = global_location['tz']
    tz = pytz.timezone(tz_str)
    now = datetime.now(tz)
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞
        sunrise_dt, sunset_dt = calculate_sun_times(now.date(), lat, lon, tz)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚ùå")
        return

    sunrise = sunrise_dt.strftime("%H:%M:%S")
    sunset = sunset_dt.strftime("%H:%M:%S")
    date_str = now.strftime("%Y-%m-%d")
    chat_id = update.effective_chat.id
    user = update.effective_user
    if chat_id not in subscribed_chats:
        subscribed_chats[chat_id] = {}
    subscribed_chats[chat_id][user.id] = user.first_name

    text = f"üìÖ {date_str}\nüåÖ {sunrise}\nüåá {sunset}"
    await update.message.reply_text(text)

#############################################
# –ù–æ–≤—ã–π —Ö–µ–ª–ø–µ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –≤ –≥—Ä—É–ø–ø–∞—Ö
#############################################

async def send_notification(chat_id, msg, key):
    try:
        await application.bot.send_message(chat_id, msg, parse_mode="HTML")
        notified_events_global[key] = True
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ %s, –ø—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML", chat_id)
        try:
            # –£–±–∏—Ä–∞–µ–º HTML‚Äë—Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø
            plain_msg = msg.replace("<a href='tg://user?id=", "").replace("'>", " ").replace("</a>", "")
            await application.bot.send_message(chat_id, plain_msg)
            notified_events_global[key] = True
        except Exception as e2:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ %s", chat_id)

#############################################
# –ú–µ—Ö–∞–Ω–∏–∑–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#############################################

async def job_wrapper():
    try:
        await check_notifications()
    except Exception as e:
        logging.exception("Unhandled exception in job_wrapper: %s", e)

async def check_notifications():
    try:
        if not global_location:
            return
        lat = global_location['lat']
        lon = global_location['lon']
        tz_str = global_location['tz']
        tz = pytz.timezone(tz_str)
        now = datetime.now(tz)
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞
            sunrise_dt, sunset_dt = calculate_sun_times(now.date(), lat, lon, tz)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        sunrise_notif = sunrise_dt - timedelta(minutes=REMINDER_OFFSET)
        sunset_notif = sunset_dt - timedelta(minutes=REMINDER_OFFSET)
        date_str = now.strftime("%Y-%m-%d")

        for chat_id, subs in subscribed_chats.items():
            mentions = " ".join([f"<a href='tg://user?id={uid}'>{name}</a>" for uid, name in subs.items()])
            key_sr = (chat_id, now.date(), "sunrise")
            if key_sr not in notified_events_global:
                if abs((now - sunrise_notif).total_seconds()) < 30:
                    msg = f"üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞ üåÖ {mentions}"
                    await send_notification(chat_id, msg, key_sr)
            key_ss = (chat_id, now.date(), "sunset")
            if key_ss not in notified_events_global:
                if abs((now - sunset_notif).total_seconds()) < 30:
                    msg = f"üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ –∑–∞–∫–∞—Ç–∞ üåá {mentions}"
                    await send_notification(chat_id, msg, key_ss)
    except Exception as e:
        logging.exception("Unhandled exception in check_notifications: %s", e)

def clear_notified_events():
    today = date.today()
    keys = [k for k in notified_events_global if k[1] != today]
    for k in keys:
        del notified_events_global[k]

async def start_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(job_wrapper()), 'interval', seconds=30)
    scheduler.add_job(clear_notified_events, 'cron', hour=0, minute=1)
    scheduler.start()
    logging.info("Scheduler –∑–∞–ø—É—â–µ–Ω.")

async def set_bot_commands(app: Application) -> None:
    cmds = [
        BotCommand("start", "–ù–∞—á–∞–ª–æ üòÄ"),
        BotCommand("setlocation", "üìç –õ–æ–∫–∞—Ü–∏—è"),
        BotCommand("times", f"‚è∞ –í—Ä–µ–º—è (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {REMINDER_OFFSET} –º–∏–Ω)"),
        BotCommand("test", "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    ]
    await app.bot.set_my_commands(cmds)
    logging.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

#############################################
# –ú–µ—Ö–∞–Ω–∏–∑–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test)
#############################################

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not global_location:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /setlocation")
        return

    lat = global_location['lat']
    lon = global_location['lon']
    tz_str = global_location['tz']
    tz = pytz.timezone(tz_str)
    now = datetime.now(tz)
    try:
        sunrise_dt, sunset_dt = calculate_sun_times(now.date(), lat, lon, tz)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ ‚ùå")
        return

    sunrise = sunrise_dt.strftime("%H:%M:%S")
    sunset = sunset_dt.strftime("%H:%M:%S")
    date_str = now.strftime("%Y-%m-%d")
    test_msg_sr = f"[TEST] üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞ üåÖ (—Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)"
    test_msg_ss = f"[TEST] üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ –∑–∞–∫–∞—Ç–∞ üåá (—Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)"
    await update.message.reply_text(f"–¢–µ—Å—Ç: –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ {sunrise}, –≤—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ {sunset}")
    await update.message.reply_text(test_msg_sr)
    await update.message.reply_text(test_msg_ss)

#############################################
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
#############################################

def main():
    global application
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setlocation", setlocation))
    application.add_handler(CommandHandler("times", times))
    application.add_handler(CommandHandler("test", test))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))
    loop = asyncio.get_event_loop()
    loop.create_task(start_scheduler())
    loop.create_task(set_bot_commands(application))
    application.run_polling()

if __name__ == '__main__':
    main()
