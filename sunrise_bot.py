#!/usr/bin/env python3
import logging
import asyncio
import sqlite3
from datetime import datetime, timedelta, date
import pytz
from telegram import (
    Update, 
    BotCommand, 
    KeyboardButton, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from astral import Observer
from astral.sun import sun
from timezonefinder import TimezoneFinder

# –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.py
from config import BOT_TOKEN

#############################################
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#############################################

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: {"lat": float, "lon": float, "tz": str})
global_location = None

# –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã ‚Äì —Å–ª–æ–≤–∞—Ä—å: { chat_id: {user_id: first_name, ...} }
subscribed_chats = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∫–ª—é—á (chat_id, –¥–∞—Ç–∞, —Ç–∏–ø_—Å–æ–±—ã—Ç–∏—è)
notified_events_global = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
DATABASE_NAME = "global_settings.db"

# –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–º–µ—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) –≤ –º–∏–Ω—É—Ç–∞—Ö
REMINDER_OFFSET = 10

#############################################
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#############################################

def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
    """
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_settings (
            id INTEGER PRIMARY KEY,
            lat REAL,
            lon REAL,
            tz TEXT
        )
    ''')
    conn.commit()
    cursor.execute("SELECT lat, lon, tz FROM global_settings WHERE id = 1")
    row = cursor.fetchone()
    if row:
        global global_location
        global_location = {"lat": row[0], "lon": row[1], "tz": row[2]}
        logging.info("–õ–æ–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: %s", global_location)
    conn.close()

def save_global_location(lat: float, lon: float, tz: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –≤ –ë–î."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM global_settings WHERE id = 1")
    if cursor.fetchone():
        cursor.execute("UPDATE global_settings SET lat = ?, lon = ?, tz = ? WHERE id = 1", (lat, lon, tz))
    else:
        cursor.execute("INSERT INTO global_settings (id, lat, lon, tz) VALUES (1, ?, ?, ?)", (lat, lon, tz))
    conn.commit()
    conn.close()

#############################################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
#############################################

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger('apscheduler').setLevel(logging.WARNING)

#############################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#############################################

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üòÄ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üìç /setlocation ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
        f"‚è∞ /times ‚Äì –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {REMINDER_OFFSET} –º–∏–Ω)"
    )
    await update.message.reply_text(text)

async def setlocation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é:
      ‚Äì –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°.
      ‚Äì –í –õ–° –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏.
    """
    chat_type = update.effective_chat.type
    if chat_type in ("group", "supergroup"):
        me = await context.bot.get_me()
        bot_username = me.username
        url = f"https://t.me/{bot_username}?start=setlocation"
        inline_kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("üë§ –í –õ–°", url=url)
        )
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤ –õ–° –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏.", reply_markup=inline_kb)
        return

    # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏
    button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    kb = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π –∏ –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.
    """
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        tf = TimezoneFinder()
        tz_str = tf.timezone_at(lng=lon, lat=lat) or "UTC"
        global global_location
        global_location = {"lat": lat, "lon": lon, "tz": tz_str}
        save_global_location(lat, lon, tz_str)
        await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è: {lat}, {lon} (tz: {tz_str}) ‚úÖ")
    else:
        await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")

async def times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å –¥–∞—Ç–æ–π.
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    if not global_location:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /setlocation")
        return

    lat = global_location['lat']
    lon = global_location['lon']
    tz_str = global_location['tz']
    tz = pytz.timezone(tz_str)
    now = datetime.now(tz)
    observer = Observer(latitude=lat, longitude=lon)
    try:
        s = sun(observer, date=now.date(), tzinfo=tz)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚ùå")
        return

    sunrise = s["sunrise"].strftime("%H:%M:%S")
    sunset = s["sunset"].strftime("%H:%M:%S")
    date_str = now.strftime("%Y-%m-%d")
    chat_id = update.effective_chat.id
    user = update.effective_user
    if chat_id not in subscribed_chats:
        subscribed_chats[chat_id] = {}
    subscribed_chats[chat_id][user.id] = user.first_name

    text = f"üìÖ {date_str}\nüåÖ {sunrise}\nüåá {sunset}"
    await update.message.reply_text(text)

#############################################
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#############################################

async def job_wrapper():
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è check_notifications, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    """
    try:
        await check_notifications()
    except Exception as e:
        logging.exception("Unhandled exception in job_wrapper: %s", e)

async def check_notifications():
    """
    –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫. –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    (–∑–∞ REMINDER_OFFSET –º–∏–Ω –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞) –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∏—Ö —Å –¥–∞—Ç–æ–π –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
    """
    try:
        if not global_location:
            return
        lat = global_location['lat']
        lon = global_location['lon']
        tz_str = global_location['tz']
        tz = pytz.timezone(tz_str)
        now = datetime.now(tz)
        observer = Observer(latitude=lat, longitude=lon)
        try:
            s = sun(observer, date=now.date(), tzinfo=tz)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        sunrise_notif = s["sunrise"] - timedelta(minutes=REMINDER_OFFSET)
        sunset_notif = s["sunset"] - timedelta(minutes=REMINDER_OFFSET)
        date_str = now.strftime("%Y-%m-%d")

        for chat_id, subs in subscribed_chats.items():
            mentions = " ".join([f"<a href='tg://user?id={uid}'>{name}</a>" for uid, name in subs.items()])
            key_sr = (chat_id, now.date(), "sunrise")
            if key_sr not in notified_events_global:
                if abs((now - sunrise_notif).total_seconds()) < 30:
                    try:
                        msg = f"üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞ üåÖ {mentions}"
                        await application.bot.send_message(chat_id, msg, parse_mode="HTML")
                        notified_events_global[key_sr] = True
                    except Exception as e:
                        logging.exception("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ %s", chat_id)
            key_ss = (chat_id, now.date(), "sunset")
            if key_ss not in notified_events_global:
                if abs((now - sunset_notif).total_seconds()) < 30:
                    try:
                        msg = f"üìÖ {date_str}\n‚è∞ 10 –º–∏–Ω –¥–æ –∑–∞–∫–∞—Ç–∞ üåá {mentions}"
                        await application.bot.send_message(chat_id, msg, parse_mode="HTML")
                        notified_events_global[key_ss] = True
                    except Exception as e:
                        logging.exception("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞—Ç–∞ –≤ —á–∞—Ç–µ %s", chat_id)
    except Exception as e:
        logging.exception("Unhandled exception in check_notifications: %s", e)

def clear_notified_events():
    """–û—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π."""
    today = date.today()
    keys = [k for k in notified_events_global if k[1] != today]
    for k in keys:
        del notified_events_global[k]

async def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(job_wrapper()), 'interval', seconds=30)
    scheduler.add_job(clear_notified_events, 'cron', hour=0, minute=1)
    scheduler.start()
    logging.info("Scheduler –∑–∞–ø—É—â–µ–Ω.")

async def set_bot_commands(app: Application) -> None:
    cmds = [
        BotCommand("start", "–ù–∞—á–∞–ª–æ üòÄ"),
        BotCommand("setlocation", "üìç –õ–æ–∫–∞—Ü–∏—è"),
        BotCommand("times", f"‚è∞ –í—Ä–µ–º—è (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {REMINDER_OFFSET} –º–∏–Ω)")
    ]
    await app.bot.set_my_commands(cmds)
    logging.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

#############################################
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
#############################################

def main():
    global application
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setlocation", setlocation))
    application.add_handler(CommandHandler("times", times))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))
    loop = asyncio.get_event_loop()
    loop.create_task(start_scheduler())
    loop.create_task(set_bot_commands(application))
    application.run_polling()

if __name__ == '__main__':
    main()
